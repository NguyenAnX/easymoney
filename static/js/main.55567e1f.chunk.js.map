{"version":3,"sources":["components/RoundPosition.js","components/Extra.js","components/PlayerRoundResult.js","components/GameRun.js","App.js","serviceWorker.js","index.js"],"names":["RoundPosition","props","positions","player","playerIndex","onPositionClick","react_default","a","createElement","row","justify","type","gutter","Object","keys","map","key","position","col","es_button","onClick","shape","Extra","onClickItem","score","name","icon","PlayerRoundResult","items","onRemoveItem","item","index","tag","color","closable","onClose","e","preventDefault","GameRun","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","players","earn","roundResult","1","2","3","4","columns","render","title","dataIndex","text","record","RoundPosition_RoundPosition","Extra_Extra","onClickExtraItem","PlayerRoundResult_PlayerRoundResult","removePlayerItem","bind","assertThisInitialized","push","forceUpdate","itemIndex","splice","card","bordered","table","dataSource","pagination","React","Component","App","className","components_GameRun","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55567e1f.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Row, Col } from 'antd';\n\nexport const RoundPosition = (props) => {\n  const { positions, player, playerIndex, onPositionClick } = props;\n  return (\n    <Row justify=\"start\" type=\"flex\" gutter={4}>\n      {\n        Object.keys(positions).map((key) => {\n          return (\n            positions[key] && player.position == 0 ?\n              <Col>\n                <Button \n                  onClick={() => onPositionClick(playerIndex, key)}\n                  shape=\"circle\">\n                  {key}\n                </Button>\n              </Col> : null\n          )\n        })\n      }\n    </Row>\n  )\n}","import React from 'react';\nimport { Table, Button, Tag, Row, Col, Divider} from 'antd';\n\nexport const Extra = (props) => {\n  const { playerIndex } = props;\n  return (\n    <Row gutter={4} justify=\"start\" type=\"flex\">\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: 1, name: \"Black\" });\n          }}\n          shape=\"primary\"\n          icon=\"line\"\n          >\n            </Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: 2, name: \"Red\" });\n          }}\n          shape=\"primary\"\n          icon=\"pause\"\n        ></Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: 3, name: \"3 Pairs\" });\n          }}\n          shape=\"primary\"\n          icon=\"menu\"\n        ></Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: 4, name: \"FoaK\" });\n          }}\n          shape=\"primary\"\n          icon=\"appstore\"\n        ></Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: -1, name: \"Black\" });\n          }}\n          shape=\"danger\"\n          icon=\"line\"\n        ></Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: -2, name: \"Red\" });\n          }}\n          shape=\"danger\"\n          icon=\"pause\"\n        ></Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: -3, name: \"3 Pairs\" });\n          }}\n          shape=\"danger\"\n          icon=\"menu\"\n        ></Button>\n      </Col>\n      <Col>\n        <Button\n          onClick={() => {\n            props.onClickItem(playerIndex, { score: -4, name: \"FoaK\" });\n          }}\n          shape=\"danger\"\n          icon=\"appstore\"\n        ></Button>\n      </Col>\n    </Row>\n\n  )\n}","import React from 'react';\nimport { Row, Col, Tag } from 'antd';\n\nexport const PlayerRoundResult = (props) => {\n  const { playerIndex, items, onRemoveItem } = props;\n\n  return (\n    <Row justify=\"start\" type=\"flex\">\n      {\n        items.map((item, index) => {\n          return (\n            <Col key={index} gutter={8}>\n              <Tag\n                color={item.score >= 0 ? \"#87d068\" : \"#f50\"}\n                closable\n                onClose={(e) => {\n                  e.preventDefault();\n                  onRemoveItem(playerIndex, index)\n                }}>\n                {item.name}\n              </Tag>\n            </Col>\n          )\n        })\n      }\n    </Row>\n  );\n}","import React from 'react';\nimport { Table, Button, Tag, Row, Col, Card } from 'antd';\nimport { RoundPosition } from './RoundPosition';\nimport { Extra } from './Extra';\nimport { PlayerRoundResult } from './PlayerRoundResult';\n\nclass GameRun extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      players: [\n        {\n          key: '1',\n          name: 'p1',\n          score: 0,\n          earn: 0,\n          roundResult: [],\n          position: 0,\n        },\n        {\n          key: '2',\n          name: 'p2',\n          score: 0,\n          earn: 0,\n          roundResult: [],\n          position: 0,\n        },\n        {\n          key: '3',\n          name: 'p3',\n          score: 0,\n          earn: 0,\n          roundResult: [],\n          position: 0,\n        },\n        {\n          key: '4',\n          name: 'p4',\n          score: 0,\n          earn: 0,\n          roundResult: [],\n          position: 0,\n        },\n      ],\n      positions: {\n        1: true,\n        2: true,\n        3: true,\n        4: true,\n      }\n    }\n\n    this.columns = [\n      {\n        render: () => <Button shape=\"circle\" icon=\"edit\" />,\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n      },\n      { \n        title: 'Position',\n        dataIndex: '',\n        render: (text, record, index) => <RoundPosition positions={this.state.positions} player={record} playerIndex={index} onPositionClick={this.onPositionClick} />,\n      },\n      {\n        title: 'Extra',\n        dataIndex: 'extra',\n        render: (text, record, index) => <Extra playerIndex={index} onClickItem={this.onClickExtraItem} />\n      },\n      {\n        title: 'Round Result',\n        dataIndex: 'roundResult',\n        render: (text, record, index) => <PlayerRoundResult playerIndex={index} items={record.roundResult} onRemoveItem={this.removePlayerItem} />\n      },\n      {\n        title: 'Earn',\n        dataIndex: 'earn',\n      },\n      {\n        title: 'Score',\n        dataIndex: 'score',\n      },\n    ];\n\n    this.onClickExtraItem = this.onClickExtraItem.bind(this)\n    this.removePlayerItem = this.removePlayerItem.bind(this)\n    this.onPositionClick = this.onPositionClick.bind(this)\n  }\n\n\n  onClickExtraItem(playerIndex, item) {\n    let player = this.state.players[playerIndex]\n    player.earn += item.score\n    player.roundResult.push(item)\n    this.forceUpdate()\n  }\n\n  removePlayerItem(playerIndex, itemIndex) {\n    let player = this.state.players[playerIndex]\n    let item = player.roundResult[itemIndex]\n    player.earn -= item.score\n    player.roundResult.splice(itemIndex, 1)\n    this.forceUpdate()\n  }\n\n  onPositionClick(playerIndex, position) {\n    let positions = this.state.positions\n    positions[position] = false\n\n    let player = this.state.players[playerIndex]\n    player.position = position\n\n    this.forceUpdate()\n  }\n\n  render() {\n    return (\n      <Card bordered={false}>\n        <Row gutter={8} justify=\"start\" type=\"flex\">\n          <Col>\n            <Button type=\"primary\">Next Round</Button>\n          </Col>\n          <Col>\n            <Button>Clear</Button>\n          </Col>\n          <Col>\n            <Button type=\"danger\">End Game</Button>\n          </Col>\n        </Row>\n        <br/>\n        <Row>\n          <Table\n            dataSource={this.state.players}\n            columns={this.columns}\n            bordered\n            pagination={false}\n          />\n        </Row>\n      </Card>\n    )\n  }\n}\n\nexport default GameRun;\n","import React from 'react';\nimport GameRun from './components/GameRun';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <GameRun />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}